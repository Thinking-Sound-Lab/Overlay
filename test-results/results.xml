<testsuites id="" name="" tests="4" failures="2" skipped="2" errors="0" time="65.449965">
<testsuite name="auth/protocol-handling.test.ts" timestamp="2025-09-06T12:27:00.245Z" hostname="electron" tests="4" failures="2" skipped="2" time="63.906" errors="0">
<testcase name="Protocol Handling (Windows Single-Instance Fix) › should prevent multiple instances when handling OAuth protocol" classname="auth/protocol-handling.test.ts" time="30.012">
<failure message="protocol-handling.test.ts:6:7 should prevent multiple instances when handling OAuth protocol" type="FAILURE">
<![CDATA[  [electron] › auth/protocol-handling.test.ts:6:7 › Protocol Handling (Windows Single-Instance Fix) › should prevent multiple instances when handling OAuth protocol 

    Test timeout of 30000ms exceeded.
]]>
</failure>
</testcase>
<testcase name="Protocol Handling (Windows Single-Instance Fix) › should handle OAuth callback URL in existing instance" classname="auth/protocol-handling.test.ts" time="30.007">
<failure message="protocol-handling.test.ts:69:7 should handle OAuth callback URL in existing instance" type="FAILURE">
<![CDATA[  [electron] › auth/protocol-handling.test.ts:69:7 › Protocol Handling (Windows Single-Instance Fix) › should handle OAuth callback URL in existing instance 

    Test timeout of 30000ms exceeded.
]]>
</failure>
</testcase>
<testcase name="Protocol Handling (Windows Single-Instance Fix) › should focus existing window when second instance is prevented" classname="auth/protocol-handling.test.ts" time="3.887">
<skipped>
</skipped>
</testcase>
<testcase name="Protocol Handling (Windows Single-Instance Fix) › should handle malformed protocol URLs gracefully" classname="auth/protocol-handling.test.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>