import posthog from 'posthog-js';

// Initialize PostHog
export const initializeAnalytics = () => {
  const posthogKey = process.env.REACT_APP_POSTHOG_KEY || 'your-posthog-key';
  const posthogHost = process.env.REACT_APP_POSTHOG_HOST || 'https://app.posthog.com';
  
  if (posthogKey && posthogKey !== 'your-posthog-key') {
    posthog.init(posthogKey, {
      api_host: posthogHost,
      disable_external_dependency_loading: true, // Important for CSP compliance
      loaded: (posthog) => {
        if (process.env.NODE_ENV === 'development') {
          console.log('PostHog loaded in development mode with CSP compatibility');
        }
      },
    });

    // Make PostHog available globally
    window.posthog = posthog;
  }
};

// Analytics event tracking functions
export const analytics = {
  // User events
  identify: (userId: string, properties?: Record<string, any>) => {
    if (window.posthog) {
      window.posthog.identify(userId, properties);
    }
  },

  track: (event: string, properties?: Record<string, any>) => {
    if (window.posthog) {
      window.posthog.capture(event, properties);
    }
  },

  // Authentication events
  trackUserSignUp: (method: 'email' | 'google' | 'github') => {
    analytics.track('user_signed_up', { method });
  },

  trackUserSignIn: (method: 'email' | 'google' | 'github') => {
    analytics.track('user_signed_in', { method });
  },

  trackUserSignOut: () => {
    analytics.track('user_signed_out');
  },

  // Onboarding events
  trackOnboardingStarted: () => {
    analytics.track('onboarding_started');
  },

  trackOnboardingStepCompleted: (step: 'auth' | 'permissions' | 'guide') => {
    analytics.track('onboarding_step_completed', { step });
  },

  trackOnboardingCompleted: () => {
    analytics.track('onboarding_completed');
  },

  // Permission events
  trackPermissionGranted: (permission: 'microphone' | 'accessibility') => {
    analytics.track('permission_granted', { permission });
  },

  trackPermissionDenied: (permission: 'microphone' | 'accessibility') => {
    analytics.track('permission_denied', { permission });
  },

  // Recording events
  trackRecordingStarted: () => {
    analytics.track('recording_started');
  },

  trackRecordingStopped: (duration: number) => {
    analytics.track('recording_stopped', { duration_seconds: duration });
  },

  trackTranscriptionCompleted: (wordCount: number, wpm: number, wasTranslated: boolean) => {
    analytics.track('transcription_completed', { 
      word_count: wordCount, 
      wpm, 
      was_translated: wasTranslated 
    });
  },

  // Translation events
  trackTranslationUsed: (sourceLanguage: string, targetLanguage: string, confidence: number) => {
    analytics.track('translation_used', { 
      source_language: sourceLanguage, 
      target_language: targetLanguage,
      confidence 
    });
  },

  // Settings events
  trackSettingChanged: (setting: string, value: any) => {
    analytics.track('setting_changed', { setting, value });
  },

  // Feature usage
  trackFeatureUsed: (feature: 'ai_refinement' | 'translation' | 'clipboard_mode' | 'auto_insert') => {
    analytics.track('feature_used', { feature });
  },

  // Error events
  trackError: (error: string, context?: Record<string, any>) => {
    analytics.track('error_occurred', { error, ...context });
  },

  // App events
  trackAppLaunched: () => {
    analytics.track('app_launched');
  },

  trackAppClosed: () => {
    analytics.track('app_closed');
  },

  // Subscription events
  trackSubscriptionUpgrade: (tier: 'pro') => {
    analytics.track('subscription_upgraded', { tier });
  },

  trackSubscriptionCancelled: () => {
    analytics.track('subscription_cancelled');
  },
};

// Add PostHog to window type
declare global {
  interface Window {
    posthog: typeof posthog;
  }
}