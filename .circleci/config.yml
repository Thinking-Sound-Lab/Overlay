version: 2.1

# Executors for different platforms
executors:
  node-linux:
    docker:
      - image: cimg/node:22.15
    resource_class: large

  # macOS executor
  macos:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1

  windows:
    machine:
      image: windows-server-2022-gui:2024.01.1
    resource_class: windows.large

# Commands for reusable steps
commands:
  install-dependencies:
    description: "Install npm dependencies with caching"
    steps:
      - restore_cache:
          keys:
            - v3-deps-node-22-{{ checksum "package-lock.json" }}
            - v3-deps-node-22-
            - v2-deps-
      - run:
          name: Install dependencies (including devDependencies)
          command: npm ci --include=dev
          environment:
            npm_config_build_from_source: false
      - save_cache:
          key: v3-deps-node-22-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache/electron
            - ~/.cache/electron-builder
            - ~/.npm
            - ~/.cache/ms-playwright

  setup-linux-build-deps:
    description: "Install Linux build dependencies"
    steps:
      - run:
          name: Install build dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot rpm

# Jobs
jobs:
  # Test and lint job for PRs
  test:
    executor: node-linux
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Lint code
          command: npm run lint
      - run:
          name: Create reports directory
          command: mkdir -p reports/junit
      - run:
          name: Run unit tests (skip E2E for CI)
          command: npm test
          environment:
            CI: true
            JEST_JUNIT_OUTPUT_DIR: reports/junit
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports

  # Build job for Windows (main branch only)
  build-windows:
    executor: windows
    steps:
      - checkout
      - run:
          name: Setup Node.js environment
          command: |
            node --version
            npm --version
            echo "PATH: $env:PATH"
      - install-dependencies
      - run:
          name: Verify electron-forge installation
          command: |
            npx electron-forge --version
            echo "Electron-forge CLI verified"
      - run:
          name: Create production environment file
          command: |
            echo "Creating .env.production file for build..."
            cat > .env.production \<< 'EOF'
            NODE_ENV=production
            OPENAI_API_KEY=$OPENAI_API_KEY
            REACT_APP_SUPABASE_URL=$REACT_APP_SUPABASE_URL
            REACT_APP_SUPABASE_ANON_KEY=$REACT_APP_SUPABASE_ANON_KEY
            REACT_APP_POSTHOG_KEY=$REACT_APP_POSTHOG_KEY
            REACT_APP_POSTHOG_HOST=$REACT_APP_POSTHOG_HOST
            DEEPGRAM_API_KEY=$DEEPGRAM_API_KEY
            BASETEN_API_KEY=$BASETEN_API_KEY
            EOF
            echo ".env.production file created successfully"
      - run:
          name: Clean previous build artifacts
          command: |
            echo "Cleaning previous build artifacts..."
            rm -rf out/make
            echo "Previous artifacts cleaned"
      - run:
          name: Build Windows application
          command: npm run make:win
          no_output_timeout: 20m
          environment:
            CI: true
      - store_artifacts:
          path: out/make
          destination: windows-builds
      - persist_to_workspace:
          root: .
          paths:
            - out/make

  # macOS build job (re-enabled with updated Node.js version)
  build-macos:
    executor: macos
    steps:
      - checkout
      - run:
          name: Setup Node.js environment
          command: |
            node --version
            npm --version
            echo "PATH: $PATH"
            echo "Available disk space:"
            df -h
      - install-dependencies
      - run:
          name: Verify electron-forge installation
          command: |
            npx electron-forge --version
            echo "Electron-forge CLI verified"
      - run:
          name: Create production environment file
          command: |
            echo "Creating .env.production file for build..."
            cat > .env.production \<< 'EOF'
            NODE_ENV=production
            OPENAI_API_KEY=$OPENAI_API_KEY
            REACT_APP_SUPABASE_URL=$REACT_APP_SUPABASE_URL
            REACT_APP_SUPABASE_ANON_KEY=$REACT_APP_SUPABASE_ANON_KEY
            REACT_APP_POSTHOG_KEY=$REACT_APP_POSTHOG_KEY
            REACT_APP_POSTHOG_HOST=$REACT_APP_POSTHOG_HOST
            DEEPGRAM_API_KEY=$DEEPGRAM_API_KEY
            BASETEN_API_KEY=$BASETEN_API_KEY
            EOF
            echo ".env.production file created successfully"
      - run:
          name: Clean previous build artifacts
          command: |
            echo "Cleaning previous build artifacts..."
            rm -rf out/make
            echo "Previous artifacts cleaned"
      - run:
          name: Build macOS application
          command: npm run make:mac
          no_output_timeout: 20m
          environment:
            CI: true
      - store_artifacts:
          path: out/make
          destination: macos-builds
      - persist_to_workspace:
          root: .
          paths:
            - out/make

  # Release job - create GitHub release with artifacts
  create-release:
    executor: node-linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Create GitHub Release
          command: |
            # Get version from package.json
            VERSION="v$(node -p "require('./package.json').version")"

            # Check if release already exists
            if gh release view "$VERSION" >/dev/null 2>&1; then
              echo "Release $VERSION already exists, skipping creation"
              exit 0
            fi

            # Create release with artifacts
            gh release create "$VERSION" \
              --title "Release $VERSION" \
              --generate-notes \
              --notes "## ðŸš€ Overlay $VERSION

            **Automatically built from main branch**

            ### ðŸ“¦ Downloads

            - **Windows**: Download the \`.exe\` installer from the assets below
            - **macOS**: Download the \`.dmg\` file from the assets below

            ### ðŸ”§ Installation Notes

            - **Windows**: You may see SmartScreen warnings - click \"More info\" â†’ \"Run anyway\" (unsigned builds)
            - **macOS**: You may need to allow the app in System Preferences â†’ Privacy & Security (unsigned builds)
            - **Bug reports**: Please report issues via GitHub Issues

            ### âœ¨ Features

            - AI-powered speech-to-text transcription
            - Cross-platform text insertion
            - Dictionary replacements and customization
            - Multiple window management
            - Hotkey support (Option+Space on macOS, Ctrl+Windows+Space on Windows)" \
              out/make/**/*
          environment:
            GITHUB_TOKEN: ${GITHUB_TOKEN}

# Workflows
workflows:
  # PR workflow - tests and lint only
  pr-workflow:
    when:
      and:
        - not:
            equal: [main, << pipeline.git.branch >>]
        - not: << pipeline.git.tag >>
    jobs:
      - test

  # Main branch workflow - build and release only (quality already validated in PR)
  main-workflow:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - not: << pipeline.git.tag >>
    jobs:
      - build-windows
      - build-macos
      - create-release:
          requires:
            - build-windows
            - build-macos

  # Manual workflow trigger (tags)
  manual-release:
    when: << pipeline.git.tag >>
    jobs:
      - build-windows
      - build-macos
      - create-release:
          requires:
            - build-windows
            - build-macos
