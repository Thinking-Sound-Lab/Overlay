name: Cleanup Artifacts

on:
  workflow_dispatch:
    inputs:
      keep_latest:
        description: 'Keep the latest N artifacts (0 = delete all)'
        required: false
        default: '0'
        type: string

jobs:
  cleanup:
    name: Cleanup Storage
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read

    steps:
      - name: Cleanup artifacts
        uses: actions/github-script@v7
        with:
          script: |
            console.log('ðŸ§¹ Starting manual artifact cleanup...');
            
            const keepLatest = parseInt('${{ github.event.inputs.keep_latest }}' || '0');
            console.log(`Configuration: Keep latest ${keepLatest} artifacts`);
            
            let page = 1;
            let totalDeleted = 0;
            let totalFailed = 0;
            let hasMore = true;
            
            while (hasMore) {
              const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page: page
              });
              
              console.log(`Page ${page}: Found ${artifacts.artifacts.length} artifacts`);
              
              if (artifacts.artifacts.length === 0) {
                hasMore = false;
                break;
              }
              
              // Sort by creation date (newest first)
              const sortedArtifacts = artifacts.artifacts.sort((a, b) => 
                new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
              );
              
              // Skip the latest N artifacts if keepLatest > 0
              const toDelete = keepLatest > 0 && page === 1 
                ? sortedArtifacts.slice(keepLatest)
                : sortedArtifacts;
              
              for (const artifact of toDelete) {
                try {
                  console.log(`Deleting: ${artifact.name} (${artifact.id}) - ${(artifact.size_in_bytes / 1024 / 1024).toFixed(2)}MB - ${artifact.created_at}`);
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                  });
                  totalDeleted++;
                } catch (error) {
                  console.error(`Failed to delete ${artifact.name}:`, error.message);
                  totalFailed++;
                }
                
                // Add small delay to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 100));
              }
              
              if (artifacts.artifacts.length < 100) {
                hasMore = false;
              } else {
                page++;
              }
            }
            
            console.log(`âœ… Cleanup complete!`);
            console.log(`ðŸ“Š Summary: ${totalDeleted} deleted, ${totalFailed} failed`);
            
            if (keepLatest > 0) {
              console.log(`ðŸ”’ Preserved latest ${keepLatest} artifacts as requested`);
            }

      - name: Storage summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            const totalSize = artifacts.artifacts.reduce((sum, artifact) => sum + artifact.size_in_bytes, 0);
            const totalSizeMB = (totalSize / 1024 / 1024).toFixed(2);
            
            console.log(`ðŸ“ˆ Current storage: ${artifacts.total_count} artifacts, ${totalSizeMB}MB total`);
            
            if (artifacts.artifacts.length > 0) {
              console.log('ðŸ“‹ Remaining artifacts:');
              artifacts.artifacts.forEach(artifact => {
                const sizeMB = (artifact.size_in_bytes / 1024 / 1024).toFixed(2);
                console.log(`  - ${artifact.name}: ${sizeMB}MB (${artifact.created_at})`);
              });
            }