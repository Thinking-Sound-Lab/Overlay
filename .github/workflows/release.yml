name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: false
        default: ""

jobs:
  release:
    name: Release ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      actions: read

    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win32
            artifact_name: overlay-windows
            artifact_path: |
              out/make/squirrel.windows/**/*
          - os: macos-latest
            platform: darwin
            artifact_name: overlay-macos
            artifact_path: |
              out/make/zip/darwin/**/*
              out/make/*.dmg

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        env:
          # Skip native compilation for CI builds - use pre-built binaries when possible
          npm_config_build_from_source: false
          ELECTRON_SKIP_BINARY_DOWNLOAD: false

      - name: Update version from tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
        shell: bash

      - name: Update version from input
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION=${{ github.event.inputs.version }}
          VERSION=${VERSION#v}
          npm version $VERSION --no-git-tag-version
        shell: bash

      # Windows Release Build
      - name: Build and publish Windows
        if: matrix.platform == 'win32'
        run: |
          npm run make:win
        env:
          CI: true
          NODE_ENV: production
          # Environment variables for the application
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_POSTHOG_KEY: ${{ secrets.REACT_APP_POSTHOG_KEY }}
          REACT_APP_POSTHOG_HOST: ${{ secrets.REACT_APP_POSTHOG_HOST }}
          # PRODUCTION CODE SIGNING (commented for testing)
          # Uncomment these lines and set secrets for production releases
          # WINDOWS_CERTIFICATE_FILE: ${{ secrets.WINDOWS_CERTIFICATE_FILE }}
          # WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
          BASETEN_API_KEY: ${{ secrets.BASETEN_API_KEY }}

      # Upload Windows artifacts
      - name: Upload Windows artifacts
        if: matrix.platform == 'win32'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 90

      # macOS Release Build
      - name: Build and publish macOS
        if: matrix.platform == 'darwin'
        run: |
          npm run make:mac
        env:
          CI: true
          NODE_ENV: production
          # Environment variables for the application
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_POSTHOG_KEY: ${{ secrets.REACT_APP_POSTHOG_KEY }}
          REACT_APP_POSTHOG_HOST: ${{ secrets.REACT_APP_POSTHOG_HOST }}
          # PRODUCTION CODE SIGNING (commented for testing)
          # Uncomment these lines and set secrets for production releases
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          # APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
          BASETEN_API_KEY: ${{ secrets.BASETEN_API_KEY }}

      # Upload macOS artifacts
      - name: Upload macOS artifacts
        if: matrix.platform == 'darwin'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 90


  # Create GitHub Release
  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    if: always() && (needs.release.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🧹 Starting aggressive artifact cleanup...');
            
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${artifacts.artifacts.length} total artifacts`);
            
            let deletedCount = 0;
            let failedCount = 0;
            
            // Delete ALL existing artifacts to start fresh (aggressive cleanup for storage reset)
            for (const artifact of artifacts.artifacts) {
              try {
                console.log(`Deleting artifact: ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes, Created: ${artifact.created_at})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                deletedCount++;
              } catch (error) {
                console.error(`Failed to delete artifact ${artifact.name} (ID: ${artifact.id}):`, error.message);
                failedCount++;
              }
            }
            
            console.log(`✅ Cleanup complete: ${deletedCount} artifacts deleted, ${failedCount} failures`);
            
            // Also check for any remaining artifacts on subsequent pages
            if (artifacts.artifacts.length === 100) {
              console.log('⚠️  More artifacts may exist (hit pagination limit). Consider running cleanup again if needed.');
            }

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display artifact structure
        run: ls -la release-artifacts/

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # Manual workflow with version input
            VERSION=${{ github.event.inputs.version }}
            # Remove 'v' prefix if present, then add it back
            VERSION=${VERSION#v}
            VERSION="v$VERSION"
            echo "Manual release: $VERSION"
          else
            # Always use package.json version for main branch pushes
            VERSION=$(node -p "require('./package.json').version")
            VERSION="v$VERSION"
            echo "Package.json version: $VERSION"
          fi
          
          # Create and push tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists, skipping tag creation"
          else
            git tag $VERSION
            git push origin $VERSION
            echo "Created and pushed tag: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🚀 Overlay ${{ steps.version.outputs.version }}

            **Automatically built from main branch**

            ### 📦 Downloads

            - **Windows**: Download the `.exe` installer from the assets below
            - **macOS**: Download the `.dmg` file from the assets below

            ### 🔧 Installation Notes

            - **Windows**: You may see SmartScreen warnings - click "More info" → "Run anyway" (unsigned builds)
            - **macOS**: You may need to allow the app in System Preferences → Privacy & Security (unsigned builds)
            - **Bug reports**: Please report issues via GitHub Issues

            ### ✨ Features

            - AI-powered speech-to-text transcription
            - Cross-platform text insertion
            - Dictionary replacements and customization
            - Multiple window management
            - Hotkey support (Option+Space on macOS, Ctrl+Windows+Space on Windows)

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.before }}...${{ steps.version.outputs.tag }}
          files: |
            release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment notification
  notify-deployment:
    needs: [release, create-release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Build Status | Release Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Windows  | ${{ needs.release.result }} | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS    | ${{ needs.release.result }} | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎉 Automated Release Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Release created automatically from main branch" >> $GITHUB_STEP_SUMMARY
          echo "2. 📦 Installers available for download in GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔄 Old artifacts automatically cleaned up" >> $GITHUB_STEP_SUMMARY
          echo "4. 🏷️ Version tag created from package.json" >> $GITHUB_STEP_SUMMARY
