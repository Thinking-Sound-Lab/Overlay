name: Release

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

jobs:
  release:
    name: Release ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      actions: read

    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win32
            artifact_name: overlay-windows
            artifact_path: |
              out/make/squirrel.windows/**/*
          - os: macos-latest
            platform: darwin
            artifact_name: overlay-macos
            artifact_path: |
              out/make/zip/darwin/**/*
              out/make/*.dmg

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        env:
          # Skip native compilation for CI builds - use pre-built binaries when possible
          npm_config_build_from_source: false
          ELECTRON_SKIP_BINARY_DOWNLOAD: false

      - name: Update version from tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
        shell: bash

      - name: Update version from input
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION=${{ github.event.inputs.version }}
          VERSION=${VERSION#v}
          npm version $VERSION --no-git-tag-version
        shell: bash

      # Windows Release Build
      - name: Build and publish Windows
        if: matrix.platform == 'win32'
        run: |
          npm run make:win
        env:
          CI: true
          NODE_ENV: production
          # Environment variables for the application
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_POSTHOG_KEY: ${{ secrets.REACT_APP_POSTHOG_KEY }}
          REACT_APP_POSTHOG_HOST: ${{ secrets.REACT_APP_POSTHOG_HOST }}
          # PRODUCTION CODE SIGNING (commented for testing)
          # Uncomment these lines and set secrets for production releases
          # WINDOWS_CERTIFICATE_FILE: ${{ secrets.WINDOWS_CERTIFICATE_FILE }}
          # WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
          BASETEN_API_KEY: ${{ secrets.BASETEN_API_KEY }}

      # macOS Release Build
      - name: Build and publish macOS
        if: matrix.platform == 'darwin'
        run: |
          npm run make:mac
        env:
          CI: true
          NODE_ENV: production
          # Environment variables for the application
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_POSTHOG_KEY: ${{ secrets.REACT_APP_POSTHOG_KEY }}
          REACT_APP_POSTHOG_HOST: ${{ secrets.REACT_APP_POSTHOG_HOST }}
          # PRODUCTION CODE SIGNING (commented for testing)
          # Uncomment these lines and set secrets for production releases
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          # APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
          BASETEN_API_KEY: ${{ secrets.BASETEN_API_KEY }}

      # Upload release artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 90

  # Create GitHub Release
  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    if: always() && (needs.release.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display artifact structure
        run: ls -la release-artifacts/

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag-based push: extract version from tag
            VERSION=${GITHUB_REF#refs/tags/}
            echo "Tag-based release: $VERSION"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual workflow: use input version
            VERSION=${{ github.event.inputs.version }}
            echo "Manual release: $VERSION"
          else
            # Main branch push: use package.json version
            VERSION=$(node -p "require('./package.json').version")
            VERSION="v$VERSION"
            echo "Main branch release: $VERSION"
            
            # Create and push tag for main branch releases
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag $VERSION
            git push origin $VERSION
            echo "Created and pushed tag: $VERSION"
          fi
          
          # Validate version is not empty
          if [ -z "$VERSION" ]; then
            echo "ERROR: Version detection failed - VERSION is empty"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Validate tag exists
        run: |
          # Check if tag exists (either created above or pre-existing)
          if ! git tag -l "${{ steps.version.outputs.tag }}"; then
            echo "ERROR: Tag ${{ steps.version.outputs.tag }} does not exist"
            exit 1
          fi
          echo "Tag ${{ steps.version.outputs.tag }} confirmed to exist"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Beta Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: true
          generate_release_notes: true
          body: |
            ## 🧪 Beta Release - Overlay ${{ steps.version.outputs.version }}

            **This is a beta release for testing purposes.**

            ### 📦 Downloads

            - **Windows**: Download `OverlaySetup.exe` from the assets below
            - **macOS**: Download the `.dmg` file from the assets below

            ### ⚠️ Beta Release Notes

            - **Unsigned builds**: For testing purposes only
            - **Windows**: You may see SmartScreen warnings - click "More info" → "Run anyway"
            - **macOS**: You may need to allow the app in System Preferences → Privacy & Security
            - **Bug reports welcome**: Please report issues via GitHub Issues

            ### 🧪 Testing Features

            - AI-powered speech-to-text transcription
            - Cross-platform text insertion
            - Dictionary replacements and customization
            - Multiple window management

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.before }}...v${{ steps.version.outputs.tag }}
          files: |
            release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment notification
  notify-deployment:
    needs: [release, create-release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          echo "## 🧪 Beta Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Build Status | Release Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Windows  | ${{ needs.release.result }} | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS    | ${{ needs.release.result }} | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Beta Testing Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Beta release published automatically in GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo "2. 🧪 Test the unsigned builds on target platforms" >> $GITHUB_STEP_SUMMARY
          echo "3. 🐛 Report any issues via GitHub Issues" >> $GITHUB_STEP_SUMMARY
          echo "4. 🚀 When ready for production: configure code signing and create stable release" >> $GITHUB_STEP_SUMMARY
